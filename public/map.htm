<!DOCTYPE html>
<html>
  <head>
    <title>Nearby Incidents</title>
    <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=0">
    <meta charset="utf-8">
    <link rel="stylesheet" href="weui.min.css">
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }

      .wrapper {
        display: flex;
        min-height: 100%;
        height: 100%;
        flex-direction: column;
      }
      
      .header {
        background: white;
        text-align: center;
        text-transform: uppercase;
      }

      .green-dot {
          background: url(https://maps.google.com/mapfiles/ms/icons/green-dot.png) no-repeat;
          background-size: 24px 24px;
          width: 24px;
          height: 24px;
          display: inline-block;
          vertical-align: text-top;
      }

      .body {
        flex: 1;
        position: relative;
      }

      #map {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
      }
    </style>
  </head>
  <body>
    <div class="wrapper">
        <div class="header">
            <h3 class="page__title" >
                Move <span class="green-dot"></span> to show more incidents
            </h3>
        </div>
        <div class="body">
            <div id="map"></div>
        </div>
    </div>
    <script id="marker-template" type="text/template">
        <div class="weui-cells__title">${locationname}</div>
        <div class="weui-cells weui-cells_form">
            <div class="weui-cell">
                <div class="weui-cell__bd">${incidentdescription}</div>
            </div>
        </div>
    </script>
    <script>
      let map;
      let markers = [];
      let queryParams = new URLSearchParams(location.search.slice(1));
      let lat = Number(queryParams.get('lat') || 28);
      let lng = Number(queryParams.get('lng') || 31);

      function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: lat, lng: lng},
            zoom: 6
        });

        // Add marker at user's location
        const marker = new google.maps.Marker({
            position: {lat: lat, lng: lng},
            map: map,
            draggable: true,
            animation: google.maps.Animation.DROP,
            icon: 'https://maps.google.com/mapfiles/ms/icons/green-dot.png',
            title: 'Your Location'
        });

        // Re-trigger searching for nearby incidents
        marker.addListener('dragend', (event) => {
            lat = event.latLng.lat();
            lng = event.latLng.lng();

            setTimeout(fetctNearbyIncidents, 0);
        });
      }

      function fetctNearbyIncidents() {
          getIncidentsData()
            .then(renderMarkers)
            .catch((error) => {
                console.error(error);
                clearMarkers();
            });
      }

      function getIncidentsData() {
          return new Promise((resolve, reject) => {
              const httpRequest = new XMLHttpRequest();
              httpRequest.onreadystatechange = function(){
                  if (httpRequest.readyState === XMLHttpRequest.DONE) {
                      if (httpRequest.status === 200) {
                          const jsonData = JSON.parse(httpRequest.responseText) || {};
                          const error = jsonData.error || {};
                          if (error.code === '0' && jsonData.payload && jsonData.payload.incidents) {
                              return resolve(jsonData.payload.incidents);
                          } else {
                              return reject(new Error('No incidents nearby'));
                          }
                      } else {
                        return reject(new Error('Could not load data'));
                      }
                  }
              };

              httpRequest.open('GET', `/proxy?lat=${lat}&lng=${lng}`, true);
              httpRequest.send();
          });
      }

      fetctNearbyIncidents();

      const template = document.getElementById('marker-template').innerText;
      function getMarkerContent(incident) {
          const fields = ['locationname', 'incidentdescription'];
          return fields.reduce((t, field) => {
              return t.replace(`\$\{${field}\}`, incident[field]);
          }, template);
      }

      function clearMarkers() {
        if (markers.length > 0) {
            markers.forEach((marker) => {
                marker.setMap(null);
                marker = null;
            });
        }
      }

      function renderMarkers(incidents) {
        const bounds = new google.maps.LatLngBounds();
        const openWindows = [];

        clearMarkers();

        incidents.forEach((incident) => {
            const incidentDetails = incident.incident;
            const latitude = Number(incidentDetails.locationlatitude);
            const longitude = Number(incidentDetails.locationlongitude);

            const infowindow = new google.maps.InfoWindow({
                content: getMarkerContent(incidentDetails)
            });

            const LatLng = new google.maps.LatLng(latitude, longitude);

            const marker = new google.maps.Marker({
                position: {lat: latitude, lng: longitude},
                map: map,
                title: incidentDetails['locationname'] || 'Nearby Incident'
            });

            marker.addListener('click', function() {
                openWindows.forEach((wnd) => wnd.close());
                
                infowindow.open(map, marker);
            });

            openWindows.push(infowindow);
            bounds.extend(LatLng);

            markers.push(marker);
        });

        map.fitBounds(bounds);
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyCv-ux4pnNp11f6qGoyKj3I0sEsawVxqiA&callback=initMap" async defer></script>
  </body>
</html>